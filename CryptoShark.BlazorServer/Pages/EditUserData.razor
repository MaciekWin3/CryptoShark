@inject IDapperSqlDataAccess DapperDb
@inject NavigationManager NavigationManager; 
@using CryptoShark.BlazorServer.Models

<div class="container">
    <EditForm Model="@Amount" Context="formContext">
        <p>
            <label for="amount">Amount:</label>
            <InputNumber @bind-Value="Amount.Amount" id="amount" placeholder="Enter value..." class="form-control"></InputNumber>

        </p>
        <div class="row align-items-end" id="container">
            <button type="submit" class="btn btn-success" @onclick="@(() => UpdateValueAdd(formContext))">Add</button>
            <button type="submit" class="btn btn-danger" @onclick="@(() => UpdateValueSubtract(formContext))">Delete</button>
        </div>
       
    </EditForm>
</div>

<style>
    #container{
        flex: 1;
        justify-content: space-around
    }

</style>



@code {

    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }

    [Parameter] public string Username { get; set; }
    [Parameter] public string Name { get; set; }

    UserDataModel UserData { get; set; }

    private AmountModel Amount = new AmountModel();


    protected override void OnInitialized()
    {
        UserData = DapperDb.FindUserDataModelByEmail(Username);
    }

    void UpdateValueAdd(EditContext formContext)
    {
        //MovieService.Save(Movie);
        DapperDb.UpdateCurrencyFromLastUserDataModel(Username, Name, Amount.Amount, "Add" );
        NavigationManager.NavigateTo("/", true);
        //ModalInstance.CloseAsync(ModalResult.Ok<UserDataModel>(UserData));
    }
    void UpdateValueSubtract(EditContext formContext)
    {
        //MovieService.Save(Movie);
        DapperDb.UpdateCurrencyFromLastUserDataModel(Username, Name, Amount.Amount, "Subtract");
        NavigationManager.NavigateTo("/", true);
        //ModalInstance.CloseAsync(ModalResult.Ok<UserDataModel>(UserData));
    }

}

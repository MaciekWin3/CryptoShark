@page "/"
@using Syncfusion.Blazor.Charts
@inject IHttpClientFactory _clientFactory
@inject ICryptocurrenciesData _db;
@inject IJSRuntime jsRuntime
@using CryptoShark.DataAccessLibrary.Models;


<div class="container">
    <div class="row">
        <div class="col-8">
            <SfChart Title="Total Balance">
                <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category"></ChartPrimaryXAxis>
                <ChartSeriesCollection>
                    <ChartSeries DataSource="@MedalDetails" XName="X" YName="Y" Type="ChartSeriesType.Line">
                    </ChartSeries>
                </ChartSeriesCollection>
            </SfChart>
        </div>
        <div class="col-4">
            <SfAccumulationChart Title="Your portfolio">
                <AccumulationChartSeriesCollection>
                    <AccumulationChartSeries DataSource="@StatisticsDetails" XName="Browser" YName="Users"
                                             Name="Browser" InnerRadius="40%">
                    </AccumulationChartSeries>
                </AccumulationChartSeriesCollection>

                <AccumulationChartLegendSettings Visible="false"></AccumulationChartLegendSettings>
            </SfAccumulationChart>
        </div>
    </div>
</div>
<div class="container">
    <div class="row">
        @if (cryptocurrencies is null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <table class="table">
                <thead class="thead-light">
                    <tr>
                        <th scope="col">Name</th>
                        <th scope="col">Price</th>
                        <th scope="col">Change</th>
                        <th scope="col">Volume</th>
                        <th scope="col">Add</th>
                        <th scope="col">Subtract</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var Crypto in cryptocurrencies)
                    {
                    <tr>
                        <td><a>@Crypto.Base</a></td>
                        <td>@Crypto.Price</td>
                        @if (@Crypto.Change > 0)
                        {
                            <td><p style="color:#18b53c;">@Crypto.Change</p></td>
                        }
                        else if (@Crypto.Change == 0)
                        {
                            <td><p>@Crypto.Change</p></td>
                        }
                        else if (@Crypto.Change < 0)
                        {
                            <td><p style="color:red;">@Crypto.Change</p></td>
                        }

                        <td>@Crypto.Volume</td>
                        <td><button type="button" @onclick="@(() => Modal.Show<Movies>("My Movies"))" class="btn btn-success">   +   </button></td>
                        <td><button type="button" @onclick="@(() => Modal.Show<Movies>("My Movies"))" class="btn btn-danger">   -   </button></td>
                    </tr>
                    }
                </tbody>
            </table>
        }

    </div>
</div>



@code{

    [CascadingParameter] public IModalService Modal { get; set; }

    private List<CryptocurrencySqlModel> cryptocurrencies;

    protected override async Task OnInitializedAsync()
    {
        //Db call

        cryptocurrencies = await _db.GetLastCryptoRecords();

    }


    public class ChartData
    {
        public string X { get; set; }
        public double Y { get; set; }
    }
    public List<ChartData> MedalDetails = new List<ChartData>
{
        new ChartData { X= "South Korea", Y= 39.4 },
        new ChartData { X= "India", Y= 61.3 },
        new ChartData { X= "Pakistan", Y= 20.4 },
        new ChartData { X= "Germany", Y= 65.1 },
        new ChartData { X= "Australia", Y= 15.8 },
        new ChartData { X= "Italy", Y= 29.2 },
        new ChartData { X= "United Kingdom", Y= 44.6 },
        new ChartData { X= "Saudi Arabia", Y= 9.7 },
        new ChartData { X= "Russia", Y= 40.8 },
        new ChartData { X= "Mexico", Y= 31 },
        new ChartData { X= "Brazil", Y= 75.9 },
        new ChartData { X= "China", Y= 51.4 }
    };

    public class Statistics
    {
        public string Browser { get; set; }
        public double Users { get; set; }
    }

    public List<Statistics> StatisticsDetails = new List<Statistics>
{
        new Statistics { Browser = "Chrome", Users = 37 },
        new Statistics { Browser = "UC Browser", Users = 17 },
        new Statistics { Browser = "iPhone", Users = 19 },
        new Statistics { Browser = "Others", Users = 4  },
        new Statistics { Browser = "Opera", Users = 11 },
        new Statistics { Browser = "Android", Users = 12 },
    };


}

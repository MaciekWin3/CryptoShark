@page "/"
@using Syncfusion.Blazor.Charts
@using System.Globalization;
@inject ICryptocurrenciesData _db
@inject IHangfireJobs db
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject IHttpClientFactory _clientFactory


<div class="container">
    <div class="row">
        <div class="col-8">
            <SfChart Title="Total Balance">
                <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category"></ChartPrimaryXAxis>
                <ChartSeriesCollection>
                    <ChartSeries DataSource="@MedalDetails" XName="X" YName="Y" Type="ChartSeriesType.Line">
                    </ChartSeries>
                </ChartSeriesCollection>
            </SfChart>
        </div>
        <div class="col-4">
            <SfAccumulationChart Title="Your portfolio">
                <AccumulationChartSeriesCollection>
                    <AccumulationChartSeries DataSource="@StatisticsDetails" XName="Cryptocurrency" YName="Amount"
                                             Name="Amount" InnerRadius="40%">
                    </AccumulationChartSeries>
                </AccumulationChartSeriesCollection>

                <AccumulationChartLegendSettings Visible="true"></AccumulationChartLegendSettings>
            </SfAccumulationChart>
        </div>
    </div>
</div>
<div class="container">
    <div class="row">
        @if (cryptocurrencies is null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <table class="table">
                <thead class="thead-light">
                    <tr>
                        <th scope="col">Name</th>
                        <th scope="col">Price</th>
                        <th scope="col">Change</th>
                        <th scope="col">Volume</th>
                        <th scope="col">Add</th>
                        <th scope="col">Subtract</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var Crypto in cryptocurrencies)
                    {
                        <tr>
                            <td><a>@Crypto.Base</a></td>
                            <td>@Crypto.Price</td>
                            @if (@Crypto.Change > 0)
                            {
                                <td><p style="color:#18b53c;">@Crypto.Change</p></td>
                            }
                            else if (@Crypto.Change == 0)
                            {
                                <td><p>@Crypto.Change</p></td>
                            }
                            else if (@Crypto.Change < 0)
                            {
                                <td><p style="color:red;">@Crypto.Change</p></td>
                            }

                            <td>@Crypto.Volume</td>
                            <td><button type="button" @onclick="@(() => Modal.Show<Movies>("My Movies"))" class="btn btn-success">   +   </button></td>
                            <td><button type="button" @onclick="@(() => Modal.Show<Movies>("My Movies"))" class="btn btn-danger">   -   </button></td>
                        </tr>
                    }
                </tbody>
            </table>
        }

    </div>
</div>
<p>@id</p>
<p>@bitcoin</p>



@code{

    [CascadingParameter] public IModalService Modal { get; set; }

    private List<CryptocurrencySqlModel> cryptocurrencies;
    public string username;

    public int id = 0;

    public double bitcoin = 0;
    public double ethereum = 0;
    public double binancecoin = 0;
    public double polkadot = 0;
    public double chainlink = 0;
    public double monero = 0;
    public double dash = 0;
    public double zillqa = 0;
    public double ravencoin = 0;
    public double etherumclassic = 0;

    string errorString;
    CryptocurrencyModel crypto;

    public static double bitcoinAmonutWithActualPrice = 0;
    public static double ethereumAmonutWithActualPrice = 0;
    public static double binancecoinAmonutWithActualPrice = 0;
    public static double polkadotAmonutWithActualPrice = 0;
    public static double chainlinkAmonutWithActualPrice = 0;
    public static double moneroAmonutWithActualPrice = 0;
    public static double dashAmonutWithActualPrice = 0;
    public static double zillqaAmonutWithActualPrice = 0;
    public static double ravencoinAmonutWithActualPrice = 0;
    public static double etherumclassicAmonutWithActualPrice = 0;


    protected override async Task OnInitializedAsync()
    {
        //Db call

        cryptocurrencies = await _db.GetLastCryptoRecords();

        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        username = user.Identity.Name;

        if (username != null)
        {
            var userdata = db.Find(username);
            id = userdata.Id;
            bitcoin = userdata.Bitcoin;
            ethereum = userdata.Ethereum;
            binancecoin = userdata.BinanceCoin;
            polkadot = userdata.Polkadot;
            chainlink = userdata.Chainlink;
            monero = userdata.Monero;
            dash = userdata.Dash;
            zillqa = userdata.Zilliqa;
            ravencoin = userdata.RavenCoin;
            etherumclassic = userdata.EtherumClassic;
        }


        //Api call
        var request = new HttpRequestMessage(HttpMethod.Get,
            "btc-usd");

        var client = _clientFactory.CreateClient("cryptonator");

        HttpResponseMessage response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            crypto = await response.Content.ReadFromJsonAsync<CryptocurrencyModel>();
            //date = DateTimeOffset.FromUnixTimeSeconds(crypto.Timestamp + 3600);
            errorString = null;
        }
        else
        {
            errorString = $"There was an error : { response.ReasonPhrase }";
        }

        bitcoinAmonutWithActualPrice = bitcoin * Double.Parse(crypto.Ticker.Price, CultureInfo.InvariantCulture); ;
    }


    public class ChartData
    {
        public string X { get; set; }
        public double Y { get; set; }
    }

    public List<ChartData> MedalDetails = new List<ChartData>
{
        new ChartData { X= "South Korea", Y= 39.4 },
        new ChartData { X= "India", Y= 61.3 },
        new ChartData { X= "Pakistan", Y= 20.4 },
        new ChartData { X= "Germany", Y= 65.1 },
        new ChartData { X= "Australia", Y= 15.8 },
        new ChartData { X= "Italy", Y= 29.2 },
        new ChartData { X= "United Kingdom", Y= 44.6 },
        new ChartData { X= "Saudi Arabia", Y= 9.7 },
        new ChartData { X= "Russia", Y= 40.8 },
        new ChartData { X= "Mexico", Y= 31 },
        new ChartData { X= "Brazil", Y= 75.9 },
        new ChartData { X= "China", Y= 51.4 }
    };

    public class Statistics
    {
        public string Cryptocurrency { get; set; }
        public double Amount { get; set; }
    }

    public List<Statistics> StatisticsDetails = new List<Statistics>
{
        new Statistics { Cryptocurrency = "Bitcoin", Amount = bitcoinwithprice },
        new Statistics { Cryptocurrency = "Ethereum", Amount = ethereum },
        new Statistics { Cryptocurrency = "BinanceCoin", Amount = binancecoin },
        new Statistics { Cryptocurrency = "Polkadot", Amount = polkadot  },
        new Statistics { Cryptocurrency = "Chainlink", Amount = chainlink },
        new Statistics { Cryptocurrency = "Monero", Amount = monero },
        new Statistics { Cryptocurrency = "Dash", Amount = dash },
        new Statistics { Cryptocurrency = "Zilliqa", Amount = zillqa },
        new Statistics { Cryptocurrency = "RavenCoin", Amount = ravencoin },
        new Statistics { Cryptocurrency = "EtherumClassic", Amount = etherumclassic }
    };


}